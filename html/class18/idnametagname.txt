Returns a reference to the element by its ID; the ID is a string which can be used to identify the element; it can be established using the id attribute in HTML, or from script.
Syntax
element = document.getElementById(id);
Parameters
id
is a case-sensitive string representing the unique ID of the element being sought.
Return Value
element
is a reference to an Element object, or null if an element with the specified ID is not in the document.
Example
HTML Content
<html>
<head>
  <title>getElementById example</title>
</head>
<body>
  <p id="para">Some text here</p>
  <button onclick="changeColor('blue');">blue</button>
  <button onclick="changeColor('red');">red</button>
</body>
</html>
JavaScript Content
function changeColor(newColor) {
  var elem = document.getElementById('para');
  elem.style.color = newColor;
}

Getelementbyclassname:-
Returns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.
Syntax
var elements = document.getElementsByClassName(names); // or:
var elements = rootElement.getElementsByClassName(names);
•	elements is a live HTMLCollection of found elements.
•	names is a string representing the list of class names to match; class names are separated by whitespace
•	getElementsByClassName can be called on any element, not only on the document. The element on which it is called will be used as the root of the search.
Examples
Get all elements that have a class of 'test'
document.getElementsByClassName('test');

getelememtbytagname:-

Returns an HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again.
Syntax
var elements = document.getElementsByTagName(name);
•	elements is a live HTMLCollection (but see the note below) of found elements in the order they appear in the tree.
•	name is a string representing the name of the elements. The special string "*" represents all elements.

Document.queryselectorall:-
Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList.
Syntax
elementList = document.querySelectorAll(selectors);
where
•	elementList is a non-live NodeList of element objects.
•	selectors is a string containing one or more CSS selectors separated by commas.
•	This example returns a list of all div elements within the document with a class of either "note" or "alert":
•	var matches = document.querySelectorAll("div.note, div.alert");
