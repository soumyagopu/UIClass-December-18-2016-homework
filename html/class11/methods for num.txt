All methods for number:-
The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Numberobject is created using the Number() constructor.
Syntax
new Number(value);
Parameters
value
The numeric value of the object being created.
Description
The primary uses for the Number object are:
•	If the argument cannot be converted into a number, it returns NaN.
•	In a non-constructor context (i.e., without the new operator), Number can be used to perform a type conversion.
Properties
Number.EPSILON
The smallest interval between two representable numbers.
Number.MAX_SAFE_INTEGER
The maximum safe integer in JavaScript (253 - 1).
Number.MAX_VALUE
The largest positive representable number.
Number.MIN_SAFE_INTEGER
The minimum safe integer in JavaScript (-(253 - 1)).
Number.MIN_VALUE
The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).
Number.NaN
Special "not a number" value.
Number.NEGATIVE_INFINITY
Special value representing negative infinity; returned on overflow.
Number.POSITIVE_INFINITY
Special value representing infinity; returned on overflow.
Number.prototype
Allows the addition of properties to a Number object.


Methods:-

1)The Number.isFinite() method determines whether the passed value is a finite number.
Syntax
Number.isFinite(value)
Parameters
value
The value to be tested for finiteness.
Return value
A Boolean indicating whether or not the given value is a finite number.
Description
In comparison to the global isFinite() function, this method doesn't forcibly convert the parameter to a number. This means only values of the type number, that are also finite, return true.
Examples
Number.isFinite(Infinity);  // false
Number.isFinite(NaN);       // false
Number.isFinite(-Infinity); // false

Number.isFinite(0);         // true
Number.isFinite(2e64);      // true

Number.isFinite('0');       // false, would've been true with
                            // global isFinite('0')
Number.isFinite(null);      // false, would've been true with
                            // global isFinite(null)
Polyfill
Number.isFinite = Number.isFinite || function(value) {
    return typeof value === "number" && isFinite(value);
}

2)The Number.isInteger() method determines whether the passed value is an integer.
Syntax
Number.isInteger(value)
Parameters
value
The value to be tested for being an integer.
Return value
A Boolean indicating whether or not the given value is an integer.
Description
If the target value is an integer, return true, otherwise return false. If the value is NaN or infinite, return false.
Examples
Number.isInteger(0);         // true
Number.isInteger(1);         // true
Number.isInteger(-100000);   // true

Number.isInteger(0.1);       // false
Number.isInteger(Math.PI);   // false

Number.isInteger(NaN);       // false
Number.isInteger(Infinity);  // false
Number.isInteger(-Infinity); // false
Number.isInteger("10");      // false
Number.isInteger(true);      // false
Number.isInteger(false);     // false
Number.isInteger([1]);       // false

Polyfill
Number.isInteger = Number.isInteger || function(value) {
  return typeof value === "number" && 
    isFinite(value) && 
    Math.floor(value) === value;
};

3)The Number.isNaN() method determines whether the passed value is NaN. It is a more robust version of the original, global isNaN().
Syntax
Number.isNaN(value)
Parameters
value
The value to be tested for NaN.
Return value
A Boolean indicating whether or not the given value is NaN.
Description
Due to both equality operators, == and ===, evaluating to false when checking if NaN is NaN, the function Number.isNaN() has become necessary. This situation is unlike all other possible value comparisons in JavaScript.
In comparison to the global isNaN() function, Number.isNaN() doesn't suffer the problem of forcefully converting the parameter to a number. This means it is now safe to pass values that would normally convert to NaN, but aren't actually the same value as NaN. This also means that only values of the type number, that are also NaN, return true.
Examples
Number.isNaN(NaN);        // true
Number.isNaN(Number.NaN); // true
Number.isNaN(0 / 0)       // true

// e.g. these would have been true with global isNaN()
Number.isNaN("NaN");      // false
Number.isNaN(undefined);  // false
Number.isNaN({});         // false
Number.isNaN("blabla");   // false

// These all return false
Number.isNaN(true);
Number.isNaN(null);
Number.isNaN(37);
Number.isNaN("37");
Number.isNaN("37.37");
Number.isNaN("");
Number.isNaN(" ");

Polyfill
Number.isNaN = Number.isNaN || function(value) {
    return typeof value === "number" && isNaN(value);
}

// Or
Number.isNaN = Number.isNaN || function(value) {     
    return value !== value;
}

4)The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that
•	can be exactly represented as an IEEE-754 double precision number, and
•	whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.
For example, 253 - 1 is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, 253 is not a safe integer: it can be exactly represented in IEEE-754, but the integer 253 + 1 can't be directly represented in IEEE-754 but instead rounds to 253under round-to-nearest and round-to-zero rounding.
The safe integers consist of all integers from -(253 - 1) inclusive to 253 - 1 inclusive.
Syntax
Number.isSafeInteger(testValue)
Parameters
testValue
The value to be tested for being a safe integer.
Return value
A Boolean indicating whether or not the given value is a number that is a safe integer.

Examples
Number.isSafeInteger(3);                    // true
Number.isSafeInteger(Math.pow(2, 53));      // false
Number.isSafeInteger(Math.pow(2, 53) - 1);  // true
Number.isSafeInteger(NaN);                  // false
Number.isSafeInteger(Infinity);             // false
Number.isSafeInteger('3');                  // false
Number.isSafeInteger(3.1);                  // false
Number.isSafeInteger(3.0);                  // true

Polyfill
Number.isSafeInteger = Number.isSafeInteger || function (value) {
   return Number.isInteger(value) && Math.abs(value) <= Number.MAX_SAFE_INTEGER;
};

5)The Number.parseFloat() method parses a string argument and returns a floating point number. This method behaves identically to the global function parseFloat() and is part of ECMAScript 2015 (its purpose is modularization of globals).
Syntax
Number.parseFloat(string)
Parameters
string
A string that represents the value you want to parse.
Return value
A floating point number parsed from the given string. If the first character cannot be converted to a number, NaN is returned.
Description
Please see parseFloat() for more details and examples.

Polyfill
Number.parseFloat = parseFloat;

6)The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.
Syntax
Number.parseInt(string,[ radix ])
Parameters
string
The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). Leading whitespace in the string argument is ignored.
radix
An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string. Specify 10 for the decimal numeral system commonly used by humans. Always specify this parameter to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified, usually defaulting the value to 10.
Return value
An integer number parsed from the given string. If the first character cannot be converted to a number, NaN is returned.
Description
This method has the same functionality as the global parseInt() function:
Number.parseInt === parseInt; // true
and is part of ECMAScript 2015 (its purpose is modularization of globals). Please see parseInt() for more details and examples.
Polyfill
Number.parseInt = parseInt;
The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.
Syntax
Number.parseInt(string,[ radix ])
Parameters
string
The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). Leading whitespace in the string argument is ignored.
radix
An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string. Specify 10 for the decimal numeral system commonly used by humans. Always specify this parameter to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified, usually defaulting the value to 10.
Return value
An integer number parsed from the given string. If the first character cannot be converted to a number, NaN is returned.
Description
This method has the same functionality as the global parseInt() function:
Number.parseInt === parseInt; // true
and is part of ECMAScript 2015 (its purpose is modularization of globals). Please see parseInt() for more details and examples.
Polyfill
Number.parseInt = parseInt;

7)The toExponential() method returns a string representing the Number object in exponential notation.
Syntax
numObj.toExponential([fractionDigits])
Parameters
fractionDigits
Optional. An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.
Return value
A string representing the given Number object in exponential notation with one digit before the decimal point, rounded to fractionDigits digits after the decimal point.
Exceptions
RangeError
If fractionDigits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well.
TypeError
If this method is invoked on an object that is not a Number.
Description
If the fractionDigits argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.
If you use the toExponential() method for a numeric literal and the numeric literal has no exponent and no decimal point, leave whitespace(s) before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.
If a number has more digits than requested by the fractionDigits parameter, the number is rounded to the nearest number represented by fractionDigits digits. See the discussion of rounding in the description of the toFixed() method, which also applies to toExponential().
Examples
Using toExponential
var numObj = 77.1234;

console.log(numObj.toExponential());  // logs 7.71234e+1
console.log(numObj.toExponential(4)); // logs 7.7123e+1
console.log(numObj.toExponential(2)); // logs 7.71e+1
console.log(77.1234.toExponential()); // logs 7.71234e+1
console.log(77 .toExponential());     // logs 7.7e+1

8)The toFixed() method formats a number using fixed-point notation.
Syntax
numObj.toFixed([digits])
Parameters
digits
Optional. The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.
Return value
A string representing the given number using fixed-point notation.
Exceptions
RangeError
If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well.
TypeError
If this method is invoked on an object that is not a Number.
Description
toFixed() returns a string representation of numObj that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If numObj is greater than 1e+21, this method simply calls Number.prototype.toString() and returns a string in exponential notation.
Examples
Using toFixed
var numObj = 12345.6789;

numObj.toFixed();       // Returns '12346': note rounding, no fractional part
numObj.toFixed(1);      // Returns '12345.7': note rounding
numObj.toFixed(6);      // Returns '12345.678900': note added zeros
(1.23e+20).toFixed(2);  // Returns '123000000000000000000.00'
(1.23e-10).toFixed(2);  // Returns '0.00'
2.34.toFixed(1);        // Returns '2.3'
2.35.toFixed(1);        // Returns '2.4'. Note that it rounds up in this case.
-2.34.toFixed(1);       // Returns -2.3 (due to operator precedence, negative number literals don't return a string...)
(-2.34).toFixed(1);     // Returns '-2.3' (...unless you use parentheses)

9)The toLocaleString() method returns a string with a language sensitive representation of this number.
The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.
Syntax
numObj.toLocaleString([locales [, options]])
Parameters
Check the Browser compatibility section to see which browsers support the locales and optionsarguments, and the Example: Checking for support for locales and options arguments for feature detection.

locales
Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension key is allowed:
nu
The numbering system to be used. Possible values include: "arab", "arabext", "bali", "beng", "deva", "fullwide", "gujr", "guru", "hanidec", "khmr", "knda", "laoo", "latn", "limb", "mlym", "mong", "mymr", "orya", "tamldec", "telu", "thai", "tibt".
options
Optional. An object with some or all of the following properties:
localeMatcher
The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". For information about this option, see the Intl page.
style
The formatting style to use. Possible values are "decimal" for plain number formatting, "currency" for currency formatting, and "percent" for percent formatting; the default is "decimal".
currency
The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the Current currency & funds code list. There is no default value; if the style is "currency", the currencyproperty must be provided.
currencyDisplay
How to display the currency in currency formatting. Possible values are "symbol" to use a localized currency symbol such as €, "code" to use the ISO currency code, "name" to use a localized currency name such as "dollar"; the default is "symbol".
useGrouping
Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. Possible values are true and false; the default is true.
The following properties fall into two groups: minimumIntegerDigits, minimumFractionDigits, and maximumFractionDigits in one group, minimumSignificantDigits and maximumSignificantDigitsin the other. If at least one property from the second group is defined, then the first group is ignored.
minimumIntegerDigits
The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.
minimumFractionDigits
The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information).
maximumFractionDigits
The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.
minimumSignificantDigits
The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.
maximumSignificantDigits
The maximum number of significant digits to use. Possible values are from 1 to 21; the default is minimumSignificantDigits.
Return value
A string with a language sensitive representation of the given number.
Examples
Using toLocaleString
In basic use without specifying a locale, a formatted string in the default locale and with default options is returned.
var number = 3500;

console.log(number.toLocaleString()); // Displays "3,500" if in U.S. English local

10)The toPrecision() method returns a string representing the Number object to the specified precision.
Syntax
numObj.toPrecision([precision])
Parameters
precision
Optional. An integer specifying the number of significant digits.
Return value
A string representing a Number object in fixed-point or exponential notation rounded to precisionsignificant digits. See the discussion of rounding in the description of the Number.prototype.toFixed()method, which also applies to toPrecision().
If the precision argument is omitted, behaves as Number.prototype.toString(). If the precisionargument is a non-integer value, it is rounded to the nearest integer.
Exceptions
RangeError
If precison is not between 1 and 100 (inclusive), a RangeError is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.
Examples
Using toPrecision
var numObj = 5.123456;

console.log(numObj.toPrecision());    // logs '5.123456'
console.log(numObj.toPrecision(5));   // logs '5.1235'
console.log(numObj.toPrecision(2));   // logs '5.1'
console.log(numObj.toPrecision(1));   // logs '5'

numObj = 0.000123

console.log(numObj.toPrecision());    // logs '0.000123'
console.log(numObj.toPrecision(5));   // logs '0.00012300'
console.log(numObj.toPrecision(2));   // logs '0.00012'
console.log(numObj.toPrecision(1));   // logs '0.0001' 

// note that exponential notation might be returned in some circumstances
console.log((1234.5).toPrecision(2)); // logs '1.2e+3'

11)The toSource() method returns a string representing the source code of the object.
Syntax
numObj.toSource()
Number.toSource()
Return value
A string representing the source code of the object.
Description
The toSource() method returns the following values:
For the built-in Number object, toSource() returns the following string indicating that the source code is not available:
function Number() {
    [native code]
}
For instances of Number, toSource() returns a string representing the source code.
This method is usually called internally by JavaScript and not explicitly in web code

12)The toString() method returns a string representing the specified Number object.
Syntax
numObj.toString([radix])
Parameters
radix
Optional. An integer between 2 and 36 specifying the base to use for representing numeric values.
Return value
A string representing the specified Number object.
Exceptions
RangeError
If toString() is given a radix not between 2 and 36, a RangeError is thrown.
Description
The Number object overrides the toString() method of the Object object; it does not inherit Object.prototype.toString(). For Number objects, the toString() method returns a string representation of the object in the specified radix.
The toString() method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), a through f are used.
If the radix is not specified, the preferred radix is assumed to be 10.
If the numObj is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the numObj preceded by a - sign, not the two's complement of the numObj.
If the numObj is not a whole number, the 'dot' sign is used to separate the decimal places.
Examples
Using toString
var count = 10;

console.log(count.toString());    // displays '10'
console.log((17).toString());     // displays '17'
console.log((17.2).toString());   // displays '17.2'

var x = 6;

console.log(x.toString(2));       // displays '110'
console.log((254).toString(16));  // displays 'fe'

console.log((-10).toString(2));   // displays '-1010'
console.log((-0xff).toString(2)); // displays '-11111111'


13)The valueOf() method returns the wrapped primitive value of a Number object.
Syntax
numObj.valueOf()
Return value
A number representing the primitive value of the specified Number object.
Description
This method is usually called internally by JavaScript and not explicitly in web code.
Examples
Using valueOf
var numObj = new Number(10);
console.log(typeof numObj); // object

var num = numObj.valueOf();
console.log(num);           // 10
console.log(typeof num);    // number

