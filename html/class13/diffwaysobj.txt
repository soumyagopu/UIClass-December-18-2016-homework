In JavaScript, almost "everything" is an object.

•	Booleans can be objects (if defined with the new keyword)
•	Numbers can be objects (if defined with the new keyword)
•	Strings can be objects (if defined with the new keyword)
•	Dates are always objects
•	Maths are always objects
•	Regular expressions are always objects
•	Arrays are always objects
•	Functions are always objects
•	Objects are always objects
All JavaScript values, except primitives, are objects.

JavaScript Primitives
A primitive value is a value that has no properties or methods.
A primitive data type is data that has a primitive value.
JavaScript defines 5 types of primitive data types:
•	string
•	number
•	boolean
•	null
•	undefined
•	Objects are Variables Containing Variables
•	JavaScript variables can contain single values:
•	Example
•	var person = "John Doe";
•	Objects are variables too. But objects can contain many values.
•	The values are written as name : value pairs (name and value separated by a colon).
•	Example
•	var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Creating a JavaScript Object
With JavaScript, you can define and create your own objects.
There are different ways to create new objects:
•	Define and create a single object, using an object literal.
•	Define and create a single object, with the keyword new.
•	Define an object constructor, and then create objects of the constructed type.
•	Using an Object Literal
•	This is the easiest way to create a JavaScript Object.
•	Using an object literal, you both define and create an object in one statement.
•	An object literal is a list of name:value pairs (like age:50) inside curly braces {}.
•	The following example creates a new JavaScript object with four properties:
•	Example
•	var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

Spaces and line breaks are not important. An object definition can span multiple lines:
Example
var person = {
    firstName:"John",
    lastName:"Doe",
    age:50,
    eyeColor:"blue"
};
Using the JavaScript Keyword new
The following example also creates a new JavaScript object with four properties:
Example
var person = new Object();
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";
Using an Object Constructor
The examples above are limited in many situations. They only create a single object.
Sometimes we like to have an "object type" that can be used to create many objects of one type.
The standard way to create an "object type" is to use an object constructor function:
Example
function person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
var myFather = new person("John", "Doe", 50, "blue");
var myMother = new person("Sally", "Rally", 48, "green");
The above function (person) is an object constructor.
Once you have an object constructor, you can create new objects of the same type:
var myFather = new person("John", "Doe", 50, "blue");
var myMother = new person("Sally", "Rally", 48, "green");

The this Keyword
In JavaScript, the thing called this, is the object that "owns" the JavaScript code.
The value of this, when used in a function, is the object that "owns" the function.
The value of this, when used in an object, is the object itself.
The this keyword in an object constructor does not have a value. It is only a substitute for the new object.
The value of this will become the new object when the constructor is used to create an object.

