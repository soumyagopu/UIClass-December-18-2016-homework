Every JavaScript object has a prototype. The prototype is also an object.
All JavaScript objects inherit their properties and methods from their prototype.

JavaScript Prototypes
All JavaScript objects inherit the properties and methods from their prototype.
Objects created using an object literal, or with new Object(), inherit from a prototype called Object.prototype.
Objects created with new Date() inherit the Date.prototype.
The Object.prototype is on the top of the prototype chain.
All JavaScript objects (Date, Array, RegExp, Function, ....) inherit from the Object.prototype.

Creating a Prototype
The standard way to create an object prototype is to use an object constructor function:
Example
function Person(first, last, age, eyecolor) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eyecolor;
}
With a constructor function, you can use the new keyword to create new objects from the same prototype:
Example
var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");
The extends keyword can be used to subclass custom classes as well as built-in objects. The .prototype of the extension must be an Object or null .
The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.
Syntax
class ChildClass extends ParentClass { ... }
Description
The extends keyword can be used to subclass custom classes as well as built-in objects.
The .prototype of the extension must be an Object or null.

